-----------------------------1D-Array-----------------------------------------
Easy:
1) Find maximum in given array.
2) Print the leaders from given array.
3) Reverse array elements.
4) Remove duplicates from sorted array in place such that each unique element appears ->[1,1,2,2,2,3,3], o/p:arr[1,2,3,_,_,_,_] 
5) Remove duplicates from unsorted array.
6) Reverse interger 
7) Find maximum consecutive one's. Input: prices = {1, 1, 0, 1, 1, 1} and Output: 3
8) Majority element: Return an element that occurs more than N/2 times in the given array.
9) Majority element: Return an element that occurs more than N/3 times in the given array.
10) 2_Sum problem: Input Format: N = 5, arr[] = {2,6,5,8,11}, target = 14 and O/p: [1, 3] (for 2nd variant).
11) Stock_Buy_Shell: Given array prices, return max profit w/ 1 buy & 1 sell
    Ex. prices = [7,1,5,3,6,4] -> 5 (buy at $1, sell at $6)
    For each, get diff b/w that & min value before, store max
12) Plus one problem: Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

Medium:
1) Find duplicate element in array:  arr = {1,3,4,2,2}; o/p: 2
2) 












---------------------------Linked list--------------------------------------













-------------------------Stack&Queue--------------------------------------------













----------------------String------------------------------------------------------











---------------------Binary Tree-------------------------------------------------












---------------------Binary Search Tree-------------------------------------------

















-------------------Graph---------------------------------------------------------


